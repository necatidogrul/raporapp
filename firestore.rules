rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Yardımcı fonksiyonlar
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOrgManager(orgId) {
      let org = get(/databases/$(database)/documents/organizations/$(orgId));
      return org != null && org.data.managerId == request.auth.uid;
    }
    
    function isOrgMember(orgId) {
      let org = get(/databases/$(database)/documents/organizations/$(orgId));
      return org != null && (
        org.data.managerId == request.auth.uid || 
        request.auth.uid in org.data.members
      );
    }
    
    // Kullanıcılar koleksiyonu
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if false;
    }
    
    // Organizasyonlar koleksiyonu
    match /organizations/{orgId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.managerId == request.auth.uid ||
        request.auth.uid in resource.data.members ||
        // Kullanıcı kendisini üye olarak ekliyorsa izin ver
        (request.resource.data.members.hasOnly(resource.data.members.concat([request.auth.uid])))
      );
      allow delete: if isAuthenticated() && resource.data.managerId == request.auth.uid;
    }
    
    // Davetiyeler koleksiyonu
    match /invitations/{invitationId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.managerId == request.auth.uid ||
        (resource.data.organizationId != null && isOrgManager(resource.data.organizationId))
      );
      allow create: if isAuthenticated() && 
        request.resource.data.organizationId != null && 
        isOrgManager(request.resource.data.organizationId);
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.managerId == request.auth.uid
      );
      allow delete: if isAuthenticated() && resource.data.managerId == request.auth.uid;
    }
    
    // Raporlar koleksiyonu
    match /reports/{reportId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.managerId == request.auth.uid ||
        isOrgManager(resource.data.organizationId)
      );
      allow create: if isAuthenticated() && isOrgMember(request.resource.data.organizationId);
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.managerId == request.auth.uid ||
        isOrgManager(resource.data.organizationId)
      );
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isOrgManager(resource.data.organizationId)
      );
    }
  }
}
